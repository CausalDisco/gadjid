# Build python wheels and release to PyPI
#
# Workflow file based on one generated by maturin via
#     maturin generate-ci github --manifest-path gadjid_python/Cargo.toml
#
# Changes:
# - bumped versions of actions (checkout, setup-python, upload-artifact, ...)
# - trigger only on version tags or manual workflow dispatch
# - validate-version job (stop if tag version != version in Cargo.toml)
# - call test-lint workflow and only continue to build wheels if test-lint passes
# - targets
#   - use abi3-py38 (cf. Cargo.toml) to build one wheel for cpython >= 3.8,
#     build version-specific wheels for PyPy, which does not yet support abi3;
#     use latest stable cpython version as per https://devguide.python.org/versions/
#     use latest PyPy3 versions as per https://www.pypy.org/download.html
#   - PyPy does not provide binary builds for musllinux nor for aarch64 windows machines
#     https://doc.pypy.org/en/latest/release-v7.3.15.html#what-is-pypy
#   - linux: compile for x86_64 and aarch64 architecture
#     and either lowest compatible manylinux (auto) or musllinux_1_1
#     and either cpython 3.12 (for abi3-py38 wheels), pypy3.9, or pypy3.10
#   - windows: compile for x64 (cpython3.12  for abi3-py38 wheels, pypy3.9, pypy3.10)
#     and aarch64 (cpython3.12 for abi3-py38 wheels)
#   - macos: compile for x86_64 and aarch64 architecture
#     and either cpython 3.12 (for abi3-py38 wheels), pypy3.9, or pypy3.10
# - add option to release to TestPyPI (tag suffix +test) or PyPI
# - use PyPI's trusted publishing (instead of using an api token)
#   https://www.maturin.rs/distribution.html?highlight=repository#using-pypis-trusted-publishing

name: CI_maturin_python

on:
  push:
    tags:
      # version tags start with v (e.g. v0.0.1 or v0.0.1+test)
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  validate-version:
    name: Validate version tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # a version tag is valid only if the version agrees with those in all Cargo.toml files,
      # the tag may have an additional suffix +test;
      # stop workflow if triggered by an invalid version tag
      - name: Check version
        if: "startsWith(github.ref, 'refs/tags/v')"
        run: |
            echo "GITHUB_REF_NAME: $GITHUB_REF_NAME"
            GITHUB_TAG_VERSION=${GITHUB_REF_NAME%"+test"}
            echo "GITHUB_TAG_VERSION: $GITHUB_TAG_VERSION"
            GADJID_VERSION=$(grep -m1 version gadjid/Cargo.toml  | tr -s ' ' | tr -d '"' | tr -d "'" | cut -d' ' -f3)
            echo "GADJID_VERSION: $GADJID_VERSION"
            GADJID_PYTHON_VERSION=$(grep -m1 version gadjid_python/Cargo.toml  | tr -s ' ' | tr -d '"' | tr -d "'" | cut -d' ' -f3)
            echo "GADJID_PYTHON_VERSION: $GADJID_PYTHON_VERSION"
            [ "$GADJID_VERSION" = "$GADJID_PYTHON_VERSION" ] || (echo "versions in Cargo.toml files differ"; exit 1)
            [ "$GITHUB_TAG_VERSION" = "v$GADJID_VERSION" ] || (echo "version tag differs from versions in Cargo.toml files"; exit 1)
            echo "valid version tag"
      # workflow manually triggered
      - if: "github.event_name == 'workflow_dispatch'"
        run: echo "manually triggered"
      # stop workflow if not triggered by a version tag nor manually triggered
      - if: "!startsWith(github.ref, 'refs/tags/v') && !github.event_name == 'workflow_dispatch'"
        run: |
            echo "neither a valid version tag nor manually triggered"
            exit 1

  test-lint:
    uses: ./.github/workflows/test-lint.yml
    needs: validate-version

  linux:
    runs-on: ubuntu-latest
    needs: test-lint
    strategy:
      matrix:
        ##target: [x86_64, x86, aarch64, armv7, s390x, ppc64le]
        target: [x86_64, aarch64]
        # auto = lowest compatible manylinux
        manylinux: [auto, musllinux_1_1]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: |
              pypy3.9
              pypy3.10
              3.12
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          # PyPy does not provide binary builds for musllinux (see notes on top),
          # so only build pypy3.9 and pypy3.10 wheels for manylinux
          args: --release --out dist ${{ (matrix.manylinux == 'auto' && '--interpreter pypy3.9 pypy3.10 python3') || '' }} --manifest-path gadjid_python/Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}-${{ matrix.manylinux }}
          path: dist

  windows:
    runs-on: windows-latest
    needs: test-lint
    strategy:
      matrix:
        ##target: [x64, x86]
        # PyPy does not provide binary builds for aarch64 windows machines,
        # so only build pypy3.9 and pypy3.10 wheels for x64 windows machines
        include:
          - target: x64
            python-interpreter: pypy3.9
          - target: x64
            python-interpreter: pypy3.10
          - target: x64
            python-interpreter: 3.12
          - target: aarch64
            python-interpreter: 3.12
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          # multiple interpreters on windows are tricky
          # and providing multiple interpreters to maturin fails,
          # so instead build wheels for one interpreter at a time
          python-version: ${{ matrix.python-interpreter }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --manifest-path gadjid_python/Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}-${{ matrix.python-interpreter }}
          path: dist

  macos:
    runs-on: macos-latest
    needs: test-lint
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: |
              pypy3.9
              pypy3.10
              3.12
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --interpreter pypy3.9 pypy3.10 python3 --manifest-path gadjid_python/Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    needs: test-lint
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path gadjid_python/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/v')"
    needs: [linux, windows, macos, sdist]
    environment: pypi
    permissions:
      id-token: write
    steps:
      - name: Decide between PyPI and TestPyPI
        id: repository
        run: |
            echo "MATURIN_REPOSITORY=pypi" > $GITHUB_OUTPUT
            [[ "$GITHUB_REF_NAME" == *"+test" ]] && echo "MATURIN_REPOSITORY=testpypi" > $GITHUB_OUTPUT || true
      - uses: actions/download-artifact@v4
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_REPOSITORY: ${{ steps.repository.outputs.MATURIN_REPOSITORY }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
